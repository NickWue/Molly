// documentation der commands objecte 

//Commands sind nach folgendem Schema aufgebaut:
this.name = function(){
	this.constructor(name:string,
					icon-name:string,
					sofortstarten:boolean,
					abletoshowregulary:boolean,
					permission:string,
					origin:string,
					canreload:boolean,
					parameter:string bzw array
					);
					
	// Eine Funktion getview muss implementiert sein. Sie wird aufgerufen wenn der Command aufgerufen wird. Initialisierungsinstanz ist View, Commands sind alle weiteren Commands als array				
	this.getview = function(view:jQuery Object,params: array){
		...
	}
	
	//Desweiteren kann eine eigene Funktion bearbeiten, wenn noch nicht alle Parameter eingegeben worden sind. z.B. um allgemeine Infos zum command zu zeigen.
	this.notallparams = function(view){
		...
	}
	
	//Wenn eine Sprachausgabe erfolgen soll, kann eine getsprachausgabe funktion implemetiert werden, die im verlauf von getview selbst über die funktion startsprachausgabe(view,paramter) initialisiet werden muss. Parameter werden als Objekt übergeben z.B. {'paramter1':'huhu'}
	this.getsprachausgabe = function(params){
		chrome.tts.speak('You have '+ params.count +' installed apps!');
	}	
	
	//Desweiteren kann ein synonym angegeben werden, mit dem der command ebenfalls aufgerufen werden kann.
	this.synonyms = getmsg('idtime');
	
	//Eine onleave function muss 
	this.onleave = function(){
		...
	}
	
	//Comming soon, die möglichkeit Benachrichtigungen auszugeben
	this.getnotif = function(){
		...
	}
	
	//In der gesamten Funktion kann auf alle Javascript sowie jQuery funktionen zugegriffen werden. Andere Frameworks sollten nicht eingebunden werden, da es sonst zu Problemen kommen kann.
	
	//In der funktion dürfen beliebig viele eigene attribute und funktionen verwendet werden, sie müssen bloß einzigartig benannt werden, sonst kommt es zu fehlern.
	
	//Für die Einheitliche Anzeige darf auf das ObjResults Object zugegriffen werden.
	//nach dem Create wird die funktion init(rowsarray) aufgerufen, nach dem Prinzip
		rowsarray[0][0],rowsarray[0][1]
		rowsarray[1][0],rowsarray[1][1]
		rowsarray[2][0],rowsarray[2][1]
	//Das Objekt erzeugt daraus eine Tabelle. 
	//mit addrows können auch weiterhin noch Zeilen hinzugefügt werden.
	//returnview liefert den html content zurück, sodass view.html(ObjResults.returnview()) den Inhalt des ResultObjects in den view bereich scheibt.
}